# Maintainer: Krakn <dan.ray.beste@gmail.com>
# Contributor: Daniel Isenmann <daniel@archlinux.org>
# Contributor: Brice Carpentier <brice@dlfp.org>

pkgname=mono-git
pkgver=6.12.0.114.r1083.d5f338c088d
pkgrel=1
pkgdesc="Free implementation of the .NET platform including runtime and compiler"
url="http://www.mono-project.com/"
arch=(i686 x86_64)
license=('custom=MITX11' 'custom=MSPL' 'BSD' 'GPL' 'LGPL2.1' 'MPL')
depends=(ca-certificates libgdiplus)
makedepends=(cmake git mono)
provides=(mono monodoc)
conflicts=(mono monodoc)
install="mono.install"
source=(
  'git+https://github.com/mono/mono.git'
  'git+https://github.com/mono/aspnetwebstack.git'
  'git+https://github.com/mono/Newtonsoft.Json.git'
  'git+https://github.com/mono/cecil.git'
  'git+https://github.com/mono/rx.git#branch=rx-oss-v2.2'
  'git+https://github.com/mono/ikvm-fork.git'
  'git+https://github.com/mono/ikdasm.git'
  'binary-reference-assemblies::git+https://github.com/mono/reference-assemblies.git'
  'git+https://github.com/mono/NUnitLite.git'
  'git+https://github.com/mono/NuGet.BuildTasks'
  'cecil-legacy::git+https://github.com/mono/cecil.git#branch=mono-legacy-0.9.5'
  'mono-boringssl::git+https://github.com/mono/boringssl.git#branch=mono'
  'git+https://github.com/mono/corefx.git'
  'git+https://github.com/mono/bockbuild.git'
  'git+https://github.com/mono/linker.git'
  'git+https://github.com/mono/roslyn-binaries.git'
  'git+https://github.com/mono/corert.git'
  'git+https://github.com/mono/xunit-binaries.git'
  'git+https://github.com/mono/api-doc-tools.git'
  'git+https://github.com/mono/api-snapshot.git'
  'mono-llvm-project::git+https://github.com/dotnet/llvm-project.git'
  'git+https://github.com/mono/helix-binaries.git'
  'git+https://github.com/Unity-Technologies/bdwgc.git'
  'mono.binfmt.d'
)
sha256sums=('SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            '9a657fc153ef4ce23bf5fc369a26bf4a124e9304bde3744d04c583c54ca47425')

pkgver() {
  cd "${pkgname%-git}"

  local -r tag=$(git describe --tags "$(git rev-list --tags --max-count=1)")
  local -r revision=$(git rev-list --count "${tag}"...HEAD)
  local -r hash=$(git rev-parse --short HEAD)

  # Suggestions for improvement welcome!
  echo "${tag/mono-}.r${revision}.${hash}"
}

prepare() {
  cd "${srcdir}/${pkgname%-git}"

  git submodule init
  git config submodule.external/aspnetwebstack.url "${srcdir}/aspnetwebstack"
  git config submodule.external/Newtonsoft.Json.url "${srcdir}/Newtonsoft.Json"
  git config submodule.external/cecil.url "${srcdir}/cecil"
  git config submodule.external/rx.url "${srcdir}/rx"
  git config submodule.external/ikvm.url "${srcdir}/ikvm-fork"
  git config submodule.external/ikdasm.url "${srcdir}/ikdasm"
  git config submodule.external/binary-reference-assemblies.url "${srcdir}/binary-reference-assemblies"
  git config submodule.external/nunit-lite.url "${srcdir}/NUnitLite"
  git config submodule.external/nuget-buildtasks.url "${srcdir}/NuGet.BuildTasks"
  git config submodule.external/cecil-legacy.url "${srcdir}/cecil-legacy"
  git config submodule.external/boringssl.url "${srcdir}/mono-boringssl"
  git config submodule.external/corefx.url "${srcdir}/corefx"
  git config submodule.external/bockbuild.url "${srcdir}/bockbuild"
  git config submodule.external/linker.url "${srcdir}/linker"
  git config submodule.external/roslyn-binaries.url "${srcdir}/roslyn-binaries"
  git config submodule.external/corert.url "${srcdir}/corert"
  git config submodule.external/xunit-binaries.url "${srcdir}/xunit-binaries"
  git config submodule.external/api-doc-tools.url "${srcdir}/api-doc-tools"
  git config submodule.external/api-snapshot.url "${srcdir}/api-snapshot"
  git config submodule.external/llvm-project.url "${srcdir}/mono-llvm-project"
  git config submodule.external/helix-binaries.url "${srcdir}/helix-binaries"
  git config submodule.external/bdwgc.url "${srcdir}/bdwgc"
  git submodule update
}

build() {
  cd "${pkgname%-git}"

  # Default prefix is /usr/local/
  # Default sysconfdir is /usr/local/etc/
  # Default sbindir is /usr/local/sbin/
  ./autogen.sh         \
    --prefix=/usr      \
    --sbindir=/usr/bin \
    --sysconfdir=/etc  \
    --with-mcs-docs=no

  # If a working installation of mono is not found, attempt to
  # bootstrap the project:
  #if ! hash mono; then
  #  make get-monolite-latest
  #fi
  
  make

  cd mcs/jay

  make
}

package() {
  install -D -m 644           \
    "${srcdir}/mono.binfmt.d" \
    "${pkgdir}/usr/lib/binfmt.d/mono.conf"

  cd "${pkgname%-git}"

  make DESTDIR="${pkgdir}" install
  install	-D -m 644 \
    "LICENSE"       \
    "${pkgdir}/usr/share/licenses/${_gitname}/LICENSE"

  cd mcs/jay

  make                       \
    DESTDIR="${pkgdir}"      \
    prefix=/usr              \
    INSTALL=../../install-sh \
    install

  # Fix .pc file to be able to request mono on what it depends, fixes
  # go-oo build:
  #sed -i -e           \
    #"s:/2.0/:/4.5/:g" \
    #"${pkgdir}/usr/lib/pkgconfig/mono-nunit.pc"
  #sed -i -e                 \
    #"s:#Requires:Requires:" \
    #"${pkgdir}/usr/lib/pkgconfig/mono.pc"
}

# vim: ts=2 sw=2 et:
